// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// binnedMatMult
arma::mat binnedMatMult(const arma::mat& X, const arma::uvec& k, const arma::vec& w, const bool use_fast_acc);
RcppExport SEXP _compboostSplines_binnedMatMult(SEXP XSEXP, SEXP kSEXP, SEXP wSEXP, SEXP use_fast_accSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type k(kSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_fast_acc(use_fast_accSEXP);
    rcpp_result_gen = Rcpp::wrap(binnedMatMult(X, k, w, use_fast_acc));
    return rcpp_result_gen;
END_RCPP
}
// binnedMatMultResponse
arma::mat binnedMatMultResponse(const arma::mat& X, const arma::vec& y, const arma::uvec& k, const arma::vec& w);
RcppExport SEXP _compboostSplines_binnedMatMultResponse(SEXP XSEXP, SEXP ySEXP, SEXP kSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type k(kSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(binnedMatMultResponse(X, y, k, w));
    return rcpp_result_gen;
END_RCPP
}
// binnedSparseMatMult
arma::mat binnedSparseMatMult(const arma::sp_mat& X, const arma::uvec& k, const arma::vec& w);
RcppExport SEXP _compboostSplines_binnedSparseMatMult(SEXP XSEXP, SEXP kSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type k(kSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(binnedSparseMatMult(X, k, w));
    return rcpp_result_gen;
END_RCPP
}
// binnedSparseMatMultResponse
arma::mat binnedSparseMatMultResponse(const arma::sp_mat& X, const arma::vec& y, const arma::uvec& k, const arma::vec& w);
RcppExport SEXP _compboostSplines_binnedSparseMatMultResponse(SEXP XSEXP, SEXP ySEXP, SEXP kSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type k(kSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(binnedSparseMatMultResponse(X, y, k, w));
    return rcpp_result_gen;
END_RCPP
}
// binVectorCustom
arma::vec binVectorCustom(const arma::vec& x, const unsigned int n_bins);
RcppExport SEXP _compboostSplines_binVectorCustom(SEXP xSEXP, SEXP n_binsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type n_bins(n_binsSEXP);
    rcpp_result_gen = Rcpp::wrap(binVectorCustom(x, n_bins));
    return rcpp_result_gen;
END_RCPP
}
// binVector
arma::vec binVector(const arma::vec& x);
RcppExport SEXP _compboostSplines_binVector(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(binVector(x));
    return rcpp_result_gen;
END_RCPP
}
// calculateIndexVector
arma::uvec calculateIndexVector(const arma::vec& x, const arma::vec& x_bins);
RcppExport SEXP _compboostSplines_calculateIndexVector(SEXP xSEXP, SEXP x_binsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type x_bins(x_binsSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateIndexVector(x, x_bins));
    return rcpp_result_gen;
END_RCPP
}
// getSubtractionRotation
arma::mat getSubtractionRotation(const arma::mat& X1, const arma::mat& X2);
RcppExport SEXP _compboostSplines_getSubtractionRotation(SEXP X1SEXP, SEXP X2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    rcpp_result_gen = Rcpp::wrap(getSubtractionRotation(X1, X2));
    return rcpp_result_gen;
END_RCPP
}
// demmlerReinsch
double demmlerReinsch(const arma::mat& XtX, const arma::mat& penalty_mat, const double& degrees_of_freedom);
RcppExport SEXP _compboostSplines_demmlerReinsch(SEXP XtXSEXP, SEXP penalty_matSEXP, SEXP degrees_of_freedomSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type XtX(XtXSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type penalty_mat(penalty_matSEXP);
    Rcpp::traits::input_parameter< const double& >::type degrees_of_freedom(degrees_of_freedomSEXP);
    rcpp_result_gen = Rcpp::wrap(demmlerReinsch(XtX, penalty_mat, degrees_of_freedom));
    return rcpp_result_gen;
END_RCPP
}
// penaltyMat
arma::mat penaltyMat(const unsigned int& nparams, const unsigned int& differences);
RcppExport SEXP _compboostSplines_penaltyMat(SEXP nparamsSEXP, SEXP differencesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned int& >::type nparams(nparamsSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type differences(differencesSEXP);
    rcpp_result_gen = Rcpp::wrap(penaltyMat(nparams, differences));
    return rcpp_result_gen;
END_RCPP
}
// findSpan
unsigned int findSpan(const double& x, const arma::vec& knots);
RcppExport SEXP _compboostSplines_findSpan(SEXP xSEXP, SEXP knotsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type knots(knotsSEXP);
    rcpp_result_gen = Rcpp::wrap(findSpan(x, knots));
    return rcpp_result_gen;
END_RCPP
}
// createKnots
arma::vec createKnots(const arma::vec& values, const unsigned int& n_knots, const unsigned int& degree);
RcppExport SEXP _compboostSplines_createKnots(SEXP valuesSEXP, SEXP n_knotsSEXP, SEXP degreeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type n_knots(n_knotsSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type degree(degreeSEXP);
    rcpp_result_gen = Rcpp::wrap(createKnots(values, n_knots, degree));
    return rcpp_result_gen;
END_RCPP
}
// createSplineBasis
arma::mat createSplineBasis(const arma::vec& values, const unsigned int& degree, const arma::vec& knots);
RcppExport SEXP _compboostSplines_createSplineBasis(SEXP valuesSEXP, SEXP degreeSEXP, SEXP knotsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type degree(degreeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type knots(knotsSEXP);
    rcpp_result_gen = Rcpp::wrap(createSplineBasis(values, degree, knots));
    return rcpp_result_gen;
END_RCPP
}
// createSparseSplineBasis
arma::sp_mat createSparseSplineBasis(arma::vec& values, const unsigned int& degree, const arma::vec& knots);
RcppExport SEXP _compboostSplines_createSparseSplineBasis(SEXP valuesSEXP, SEXP degreeSEXP, SEXP knotsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type degree(degreeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type knots(knotsSEXP);
    rcpp_result_gen = Rcpp::wrap(createSparseSplineBasis(values, degree, knots));
    return rcpp_result_gen;
END_RCPP
}
// rowWiseTensor
arma::mat rowWiseTensor(const arma::mat& A, const arma::mat& B);
RcppExport SEXP _compboostSplines_rowWiseTensor(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(rowWiseTensor(A, B));
    return rcpp_result_gen;
END_RCPP
}
// rowWiseTensorSparse
arma::sp_mat rowWiseTensorSparse(const arma::sp_mat& A, const arma::sp_mat& B);
RcppExport SEXP _compboostSplines_rowWiseTensorSparse(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(rowWiseTensorSparse(A, B));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_compboostSplines_binnedMatMult", (DL_FUNC) &_compboostSplines_binnedMatMult, 4},
    {"_compboostSplines_binnedMatMultResponse", (DL_FUNC) &_compboostSplines_binnedMatMultResponse, 4},
    {"_compboostSplines_binnedSparseMatMult", (DL_FUNC) &_compboostSplines_binnedSparseMatMult, 3},
    {"_compboostSplines_binnedSparseMatMultResponse", (DL_FUNC) &_compboostSplines_binnedSparseMatMultResponse, 4},
    {"_compboostSplines_binVectorCustom", (DL_FUNC) &_compboostSplines_binVectorCustom, 2},
    {"_compboostSplines_binVector", (DL_FUNC) &_compboostSplines_binVector, 1},
    {"_compboostSplines_calculateIndexVector", (DL_FUNC) &_compboostSplines_calculateIndexVector, 2},
    {"_compboostSplines_getSubtractionRotation", (DL_FUNC) &_compboostSplines_getSubtractionRotation, 2},
    {"_compboostSplines_demmlerReinsch", (DL_FUNC) &_compboostSplines_demmlerReinsch, 3},
    {"_compboostSplines_penaltyMat", (DL_FUNC) &_compboostSplines_penaltyMat, 2},
    {"_compboostSplines_findSpan", (DL_FUNC) &_compboostSplines_findSpan, 2},
    {"_compboostSplines_createKnots", (DL_FUNC) &_compboostSplines_createKnots, 3},
    {"_compboostSplines_createSplineBasis", (DL_FUNC) &_compboostSplines_createSplineBasis, 3},
    {"_compboostSplines_createSparseSplineBasis", (DL_FUNC) &_compboostSplines_createSparseSplineBasis, 3},
    {"_compboostSplines_rowWiseTensor", (DL_FUNC) &_compboostSplines_rowWiseTensor, 2},
    {"_compboostSplines_rowWiseTensorSparse", (DL_FUNC) &_compboostSplines_rowWiseTensorSparse, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_compboostSplines(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
