% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{binnedSparseMatMult}
\alias{binnedSparseMatMult}
\title{Calculating sparse binned matrix product}
\usage{
binnedSparseMatMult(X, k, w)
}
\arguments{
\item{X}{[\code{arma::sp_mat}]\cr
Matrix X.}

\item{k}{[\code{arma::uvec}]\cr
Index vector for mapping to original matrix $X_o(i,) = X(k(i),.)$.}

\item{w}{[\code{arma::vec}]\cr
Vector of weights that are accumulated.}
}
\value{
\code{arma::mat} Matrix Product $X^TWX$.
}
\description{
This function calculates the matrix product (for sparse matrizes) using Algorithm 3 of Zheyuan Li, Simon N. Wood: "Faster
model matrix crossproducts for large generalized linear models with discretized covariates". The idea
is to compute just on the unique rows of X by also using an index vector to map to the original matrix.
The algorithm implemented here is a small adaption of the original algorithm. Instead of calculating $XW$
which again, needs to be transposed, we directly calculate $X^TW$ to avoid another transposing step.
}
\examples{
nsim = 1e6L
nunique = trunc(sqrt(nsim))

xunique = runif(n = nunique, min = 0, max = 10)
k = sample(x = seq_len(nunique), size = nsim, replace = TRUE)

X = poly(x = xunique, degree = 20L)

binnedMatMult(X = X, k = k-1, w = 1)
}
